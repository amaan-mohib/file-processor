/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthenticatedDashboardRouteImport } from './routes/_authenticated/dashboard'
import { Route as AuthenticatedJobsIndexRouteImport } from './routes/_authenticated/jobs/index'
import { Route as AuthenticatedFilesIndexRouteImport } from './routes/_authenticated/files/index'
import { Route as AuthenticatedJobsJobIdRouteImport } from './routes/_authenticated/jobs/$jobId'
import { Route as AuthenticatedFilesFileIdRouteImport } from './routes/_authenticated/files/$fileId'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedDashboardRoute = AuthenticatedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedJobsIndexRoute = AuthenticatedJobsIndexRouteImport.update({
  id: '/jobs/',
  path: '/jobs/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedFilesIndexRoute = AuthenticatedFilesIndexRouteImport.update({
  id: '/files/',
  path: '/files/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedJobsJobIdRoute = AuthenticatedJobsJobIdRouteImport.update({
  id: '/jobs/$jobId',
  path: '/jobs/$jobId',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedFilesFileIdRoute =
  AuthenticatedFilesFileIdRouteImport.update({
    id: '/files/$fileId',
    path: '/files/$fileId',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/files/$fileId': typeof AuthenticatedFilesFileIdRoute
  '/jobs/$jobId': typeof AuthenticatedJobsJobIdRoute
  '/files': typeof AuthenticatedFilesIndexRoute
  '/jobs': typeof AuthenticatedJobsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/files/$fileId': typeof AuthenticatedFilesFileIdRoute
  '/jobs/$jobId': typeof AuthenticatedJobsJobIdRoute
  '/files': typeof AuthenticatedFilesIndexRoute
  '/jobs': typeof AuthenticatedJobsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRoute
  '/_authenticated/files/$fileId': typeof AuthenticatedFilesFileIdRoute
  '/_authenticated/jobs/$jobId': typeof AuthenticatedJobsJobIdRoute
  '/_authenticated/files/': typeof AuthenticatedFilesIndexRoute
  '/_authenticated/jobs/': typeof AuthenticatedJobsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/dashboard'
    | '/files/$fileId'
    | '/jobs/$jobId'
    | '/files'
    | '/jobs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/dashboard'
    | '/files/$fileId'
    | '/jobs/$jobId'
    | '/files'
    | '/jobs'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/login'
    | '/_authenticated/dashboard'
    | '/_authenticated/files/$fileId'
    | '/_authenticated/jobs/$jobId'
    | '/_authenticated/files/'
    | '/_authenticated/jobs/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/jobs/': {
      id: '/_authenticated/jobs/'
      path: '/jobs'
      fullPath: '/jobs'
      preLoaderRoute: typeof AuthenticatedJobsIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/files/': {
      id: '/_authenticated/files/'
      path: '/files'
      fullPath: '/files'
      preLoaderRoute: typeof AuthenticatedFilesIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/jobs/$jobId': {
      id: '/_authenticated/jobs/$jobId'
      path: '/jobs/$jobId'
      fullPath: '/jobs/$jobId'
      preLoaderRoute: typeof AuthenticatedJobsJobIdRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/files/$fileId': {
      id: '/_authenticated/files/$fileId'
      path: '/files/$fileId'
      fullPath: '/files/$fileId'
      preLoaderRoute: typeof AuthenticatedFilesFileIdRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRoute
  AuthenticatedFilesFileIdRoute: typeof AuthenticatedFilesFileIdRoute
  AuthenticatedJobsJobIdRoute: typeof AuthenticatedJobsJobIdRoute
  AuthenticatedFilesIndexRoute: typeof AuthenticatedFilesIndexRoute
  AuthenticatedJobsIndexRoute: typeof AuthenticatedJobsIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedDashboardRoute: AuthenticatedDashboardRoute,
  AuthenticatedFilesFileIdRoute: AuthenticatedFilesFileIdRoute,
  AuthenticatedJobsJobIdRoute: AuthenticatedJobsJobIdRoute,
  AuthenticatedFilesIndexRoute: AuthenticatedFilesIndexRoute,
  AuthenticatedJobsIndexRoute: AuthenticatedJobsIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
